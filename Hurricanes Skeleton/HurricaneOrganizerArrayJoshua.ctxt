#BlueJ class context
comment0.params=filename
comment0.target=HurricaneOrganizerArrayJoshua(java.lang.String)
comment0.text=\n\ Constructor\ for\ class\ HurricaneOrganizerArrayJoshua.\n\ \n\ @throws\ IOException\ \ if\ file\ with\ the\ hurricane\ information\ cannot\ be\ found\n\ \n\ @param\ \ \ filename\ \ \ \ the\ name\ of\ the\ file\n
comment1.params=filename
comment1.target=int\ determineFileLength(java.lang.String)
comment1.text=\n\ Returns\ the\ length\ of\ the\ file.\n\ \n\ @throws\ IOException\ \ if\ file\ with\ the\ hurricane\ information\ cannot\ be\ found\n\ \n\ @param\ \ \ filename\ \ \ \ the\ name\ of\ the\ file\n
comment10.params=
comment10.target=void\ sortYears()
comment10.text=\n\ Sorts\ ascending\ based\ upon\ the\ hurricanes'\ years,\n\ The\ algorithm\ is\ selection\ sort.\n
comment11.params=
comment11.target=void\ sortNames()
comment11.text=\n\ Lexicographically\ sorts\ hurricanes\ based\ on\ the\ hurricanes'\ name,\ \n\ using\ insertion\ sort.\n
comment12.params=
comment12.target=void\ sortCategories()
comment12.text=\n\ Sorts\ descending\ based\ upon\ the\ hurricanes'\ categories,\n\ using\ selection\ sort.\n
comment13.params=
comment13.target=void\ sortPressures()
comment13.text=\n\ Sorts\ descending\ based\ upon\ pressures\ using\ a\ non-recursive\ merge\ sort.\n
comment14.params=start\ end
comment14.target=void\ sortPressuresHelper(int,\ int)
comment14.text=\n\ Sorts\ descending\ a\ portion\ of\ array\ based\ upon\ pressure,\ \n\ using\ selection\ sort.\n\ \n\ @param\ \ \ start\ \ \ the\ first\ index\ to\ start\ the\ sort\n\ @param\ \ \ end\ \ \ \ \ one\ past\ the\ last\ index\ to\ sort;\ hence,\ end\ position\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ excluded\ in\ the\ sort\n
comment15.params=low\ high
comment15.target=void\ sortWindSpeeds(int,\ int)
comment15.text=\n\ Sorts\ ascending\ based\ upon\ wind\ speeds\ using\ a\ recursive\ merge\ sort.\ \n\ \n\ @param\ \ \ low\ \ \ \ \ the\ lower\ index\n\ @param\ \ \ high\ \ \ \ the\ upper\ index\n
comment16.params=low\ mid\ high
comment16.target=void\ mergeWindSpeedsSortHelper(int,\ int,\ int)
comment16.text=\n\ Merges\ two\ consecutive\ parts\ of\ an\ array,\ using\ wind\ speed\ as\ a\ criteria\n\ and\ a\ temporary\ array.\ \ The\ merge\ results\ in\ an\ ascending\ sort\ between\n\ the\ two\ given\ indices.\n\ \n\ @precondition\ the\ two\ parts\ are\ sorted\ ascending\ based\ upon\ wind\ speed\n\ \n\ @param\ low\ \ \ the\ starting\ index\ of\ one\ part\ of\ the\ array.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ index\ is\ included\ in\ the\ first\ half.\n\ @param\ mid\ \ \ the\ starting\ index\ of\ the\ second\ part\ of\ the\ array.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ index\ is\ included\ in\ the\ second\ half.\n\ @param\ high\ \ the\ ending\ index\ of\ the\ second\ part\ of\ the\ array.\ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ index\ is\ included\ in\ the\ merge.\n
comment17.params=year
comment17.target=Hurricane[]\ searchYear(int)
comment17.text=\n\ Sequential\ search\ for\ all\ the\ hurricanes\ in\ a\ given\ year.\n\ \n\ @param\ \ \ year\ \ \ \ the\ year\ to\ be\ used\ in\ the\ search\n\ @return\ \ an\ array\ of\ objects\ in\ Hurricane\ that\ occured\ in\n\ \ \ \ \ \ \ \ \ \ the\ parameter\ year\n
comment18.params=name
comment18.target=Hurricane[]\ searchHurricaneName(java.lang.String)
comment18.text=\n\ Binary\ search\ for\ a\ hurricane\ name.\n\ \n\ @param\ \ name\ \ \ hurricane\ name\ being\ search\n\ @return\ a\ Hurricane\ array\ of\ all\ objects\ in\ hurricanes\ with\ specified\ name.\ \n\ \ \ \ \ \ \ \ \ Returns\ null\ if\ there\ are\ no\ matches\n
comment19.params=name\ low\ high
comment19.target=Hurricane[]\ searchHurricaneNameHelper(java.lang.String,\ int,\ int)
comment19.text=\n\ Recursive\ binary\ search\ for\ a\ hurricane\ name.\ \ This\ is\ the\ helper\n\ for\ searchHurricaneName.\n\ \n\ @precondition\ \ the\ array\ must\ be\ presorted\ by\ the\ hurricane\ names\n\ \n\ @param\ \ \ name\ \ hurricane\ name\ to\ search\ for\n\ @param\ \ \ low\ \ \ the\ smallest\ index\ that\ needs\ to\ be\ checked\n\ @param\ \ \ high\ \ the\ highest\ index\ that\ needs\ to\ be\ checked\n\ @return\ \ a\ Hurricane\ array\ of\ all\ Hurricane\ objects\ with\ a\ specified\ name.\ \n\ \ \ \ \ \ \ \ \ \ Returns\ null\ if\ there\ are\ no\ matches\n
comment2.params=filename
comment2.target=void\ readFile(java.lang.String)
comment2.text=\n\ Reads\ the\ file.\n\ \n\ @param\ \ \ filename\ \ \ \ the\ name\ of\ the\ file\n
comment20.params=name\ index
comment20.target=Hurricane[]\ retrieveMatchedNames(java.lang.String,\ int)
comment20.text=\n\ Supports\ Binary\ Search\ method\ to\ get\ the\ full\ range\ of\ matches.\n\ \n\ @precondition\ \ the\ array\ must\ be\ presorted\ by\ the\ hurricane\ names\n\ \n\ @param\ \ \ name\ hurricane\ name\ being\ search\ for\n\ @param\ \ \ index\ \ the\ index\ where\ a\ match\ was\ found\n\ @return\ \ a\ Hurricane\ array\ with\ objects\ from\ hurricanes\ with\ specified\ name.\ \n\ \ \ \ \ \ \ \ \ \ Returns\ null\ if\ there\ are\ no\ matches\n
comment21.params=
comment21.target=void\ printHeader()
comment21.text=\n\ Comment\ this\ method\ even\ though\ you\ did\ not\ write\ it.\n
comment22.params=
comment22.target=void\ printHurricanes()
comment22.text=\n\ Comment\ this\ method\ even\ though\ you\ did\ not\ write\ it.\n
comment23.params=hurs
comment23.target=void\ printHurricanes(Hurricane[])
comment23.text=\n\ Add\ comments\ here\ even\ though\ you\ did\ not\ write\ the\ method.\n\ \n\ @param\ \ \ hurs\ \ \ \ the\ Hurricane\ array\ to\ be\ printed\n
comment24.params=
comment24.target=void\ printMenu()
comment24.text=\n\ Add\ comments\ here\ even\ though\ you\ did\ not\ write\ the\ method.\n
comment25.params=
comment25.target=void\ printMaxAndMin()
comment25.text=\n\ Add\ comments\ here\ even\ though\ you\ did\ not\ write\ the\ method.\n
comment26.params=
comment26.target=void\ printAverages()
comment26.text=\n\ Add\ comments\ here\ even\ though\ you\ did\ not\ write\ the\ method.\n
comment27.params=
comment27.target=boolean\ interactWithUser()
comment27.text=\n\ Add\ comments\ here\ even\ though\ you\ did\ not\ write\ the\ method.\n\ \n\ @return\ \ true\ \ \ \ if\ the\ user\ is\ done;\ otherwise,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ false\n
comment28.params=args
comment28.target=void\ main(java.lang.String[])
comment28.text=\n\ Comment\ the\ method\ even\ though\ you\ did\ not\ write\ it.\n\ \n\ @param\ args\ \ user's\ information\ from\ the\ command\ line\n\ \n\ @throws\ IOException\ \ if\ file\ with\ the\ hurricane\ information\ cannot\ be\ found\n
comment3.params=
comment3.target=int\ findMaxWindSpeed()
comment3.text=\n\ Finds\ the\ maximum\ wind\ speed\ of\ the\ hurricanes.\n\ \n\ @return\ \ the\ maximum\ wind\ speed\n
comment4.params=
comment4.target=int\ findMaxPressure()
comment4.text=\n\ Finds\ the\ maximum\ pressure\ of\ the\ hurricanes.\n\ \n\ @return\ \ the\ maximum\ pressure\n
comment5.params=
comment5.target=int\ findMinWindSpeed()
comment5.text=\n\ Finds\ the\ minimum\ wind\ speed\ of\ the\ hurricanes.\n\ \n\ @return\ \ the\ minimum\ wind\ speed\n
comment6.params=
comment6.target=int\ findMinPressure()
comment6.text=\n\ Finds\ the\ minimum\ pressure\ of\ the\ hurricanes.\n\ \n\ @return\ \ the\ minimum\ pressure\n
comment7.params=
comment7.target=double\ calculateAverageWindSpeed()
comment7.text=\n\ Calculates\ the\ average\ wind\ speed\ of\ the\ hurricanes.\n\ \n\ @return\ \ the\ average\ wind\ speed\n
comment8.params=
comment8.target=double\ calculateAveragePressure()
comment8.text=\n\ Calculates\ the\ average\ pressure\ of\ the\ hurricanes.\n\ \n\ @return\ \ the\ average\ pressure\n
comment9.params=
comment9.target=double\ calculateAverageCategory()
comment9.text=\n\ Calculates\ the\ average\ category\ of\ the\ hurricanes.\n\ \n\ @return\ \ the\ average\ category\n
numComments=29
